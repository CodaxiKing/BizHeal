// BizHeal Database Schema
// Complete schema for the SaaS platform with authentication, subscriptions, and business profiles

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role            @default(USER)
  hasCompletedOnboarding Boolean @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  accounts        Account[]
  sessions        Session[]
  subscription    Subscription?
  businessProfile BusinessProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Subscription management for Stripe integration
model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeCustomerId     String             @unique
  stripeSubscriptionId String?            @unique
  stripePriceId        String?
  status               SubscriptionStatus @default(TRIALING)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Business profile data collected during onboarding
model BusinessProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  companyName      String
  industry         String
  companySize      String?
  primaryChallenge String?
  goals            String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  integrations Integration[]
}

// Transaction data for business analysis
model Transaction {
  id          String   @id @default(cuid())
  date        DateTime
  amount      Float
  customerId  String
  description String?
  businessId  String
  business    BusinessProfile @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, customerId, date, amount])
}

// Third-party integrations for automated data sync
// IMPORTANT: accessToken and refreshToken MUST be encrypted before storing in production
model Integration {
  id           String   @id @default(cuid())
  platform     String   // ex: "shopify", "bling", "conta_azul"
  accessToken  String   @db.Text // Chaves e tokens devem ser criptografados em produção
  refreshToken String?  @db.Text // Chaves e tokens devem ser criptografados em produção
  scopes       String?
  shopUrl      String?  // Específico para Shopify
  lastSync     DateTime?
  businessId   String
  business     BusinessProfile @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, platform]) // Uma empresa só pode ter uma integração por plataforma
}
